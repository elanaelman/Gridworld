def-object 'robot '(is_animate can_talk))
(def-object 'office '(is_inanimate))
(def-object 'gas '(is_inanimate is_notedible can_finish (has_cost 2.0)))
(def-object 'pizza '(is_edible can_finish (has_cost 3.0)))
(def-object 'juice '(is_potable can_finish (has_cost 2.0)))
(def-object 'sushi '(is_edible can_finish (has_cost 5.0)))
(def-object 'car '(is_inanimate is_robots has_gaslevel has_speed has_mileage))

(def-roadmap '(home work supermarket gasstation dropoffLoc) 
	'((path1 home 3 supermarket) (path2 home 5 work) (path3 home 4 dropoffLoc)
	  (path4 work 2 supermarket) (path5 work 4 gasstation)
	  (path6 supermarket 2 gasstation) (path7 supermarket 3 dropoffLoc)
	  (path8 dropoffLoc 4 gasstation)))
	  
(place-object 'pizza3 'pizza 'home 0 
	nil ; no associated-things
	; current facts
	'((is_edible pizza3) (can_finish pizza3)
	 )
    nil ; propositional attitudes
)

(place-object 'juice3 'juice 'plaza 0 
	nil ; no associated-things
	; current facts
	'((is_potable juice3) (can_finish juice3)
	 )
    nil ; propositional attitudes
)

(place-object 'pizza1 'pizza 'supermarket 0 
	nil ; no associated-things
	; current facts
	'((is_edible pizza1) (has_cost 3.0) 
	 )
    nil ; propositional attitudes
)

(place-object 'juice1 'juice 'supermarket 0 
	nil ; no associated-things
	; current facts
	'((is_potable juice1) (has_cost 2.0)
	 )
    nil ; propositional attitudes
)
(place-object 'sushi1 'sushi 'supermarket 0 
	nil ; no associated-things
	; current facts
	'((is_edible sushi1) (has_cost 5.0)
	 )
    nil ; propositional attitudes
)

(place-object 'car1 'car 'home 0 
	nil ; no associated-things
	'((is_inanimate car1) (is_robots car1) (has_gaslevel car1 20.0) (has_speed car1 0.0) (has_mileage car1 0.0))
	 )
    nil ; propositional attitudes
)

(setq sleep
	(make-op
		:name ’sleep
		:pars ’(?f ?h)
		:preconds ’( (is_at AG home)
			(is_tired_to_degree AG ?t)
			(>= ?f 0.5)
			(is_hungry_to_degree AG ?h)
			(> ?f ?h)
			(not (there_is_a_fire)) )
		:effects ’( (is_tired_to_degree AG 0)
			(not (is_tired_to_degree AG ?f))
			(is_hungry_to_degree AG (+ ?h 2)))
		:time-required ’(* 4 ?f)
		:value ’(* 2 ?f)
	)
)

(setq sleep.actual 
	(make-op.actual 
		:name 'sleep.actual 
		:pars '(?f ?h)                                           	   
    		:startconds '((is_at AG home)
                  	(is_tired_to_degree AG ?f)
                  	(>= ?f 2.5)
                  	(is_hungry_to_degree AG ?h)
                  	(> ?f ?h) ); more tired than hungry
    		:stopconds '((there_is_a_fire)
    			(is_tired_to_degree AG 0.0))
    		:deletes '((is_tired_to_degree AG ?#1) 
               		(is_hungry_to_degree AG ?#2) )
    		:adds '((is_tired_to_degree AG (- ?f (* 0.5 (elapsed_time?))))
            	(is_hungry_to_degree AG (+ ?h (* 0.25 (elapsed_time?)))) ) 
    )
)

(setq pick_up	
)
(setq pick_up.actual 
)

(setq put_down
)
(setq put_down.actual
)

(setq push
	(make-op
		:name ’push
		:pars ’(?b ?x ?y ?f ?h)
		:preconds ’((is_at ?b ?x)
			(not (is_same ?x ?y))
		         )
		:effects ’((is_at ?b ?y)
			(is_tired_to_degree AG (+ ?f 2))
			(is_hungry_to_degree AG (+ ?h 1)))
		:time-required ’(* 2 ?f)
		:value ’(* 1 ?f)
	)
)
(setq push.actual
	(make-op
		:name ’push.actual
		:pars ’(?b ?x ?y ?f ?h)
		:startconds ’((is_at ?b ?x)
			(not (is_same ?x ?y))
		         )
		:stopconds ’((is_at ?b ?y)
			(is_tired_to_degree AG (+ ?f 2))
			(is_hungry_to_degree AG (+ ?h 1)))
		:adds '((is_tired_to_degree AG (- ?f (* 0.5 (elapsed_time?))))
            	(is_hungry_to_degree AG (+ ?h (* 0.25 (elapsed_time?)))) ) 
	)
	
)




